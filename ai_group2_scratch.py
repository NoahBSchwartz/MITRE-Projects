# -*- coding: utf-8 -*-
"""AI_Group2_Scratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t0DtwrG9jg4N7yk9KcZEQzE5neDgfZrc

## MITRE AI Learning Track Group 6H-R
### Phishing Email Binary Classification Model
Arav Parikh, Samuel Adamson, Terryn Gabel, Angeline Xu, Noah Schwartz
"""

import pandas as pd
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

# In your own google drive ensure that the file 'Phishing_Mitre_Dataset_Summer_of_AI.csv' resides
#   in the folder 'root >> AI_Learning_Track'
# Access the file at https://github.com/generationai/group2_hackathon2022/blob/main/Phishing_Mitre_Dataset_Summer_of_AI.csv
file_path = '/content/drive/My Drive/AI_Learning_Track/Phishing_Mitre_Dataset_Summer_of_AI.csv'

# Read in csv
df = pd.read_csv(file_path)

print(df['update_age(days)'].mean())
print(df['expiry_age(months)'].mean())
print(df['create_age(months)'].mean())

df.shape

phish = df[df['Label'] == 1]
safe = df[df['Label'] == 0]

# some data analysis
safe['Length'] = safe['URL'].map(str).apply(len)
phish['Length'] = phish['URL'].map(str).apply(len)

print(safe['Length'].mean(), phish['Length'].mean())
print(safe['update_age(days)'].mean(), phish['update_age(days)'].mean())
print(safe['expiry_age(months)'].mean(), phish['expiry_age(months)'].mean())
print(safe['create_age(months)'].mean(), phish['create_age(months)'].mean())

"""find the age of the website --> create_age - expiry_age

### Feature Extraction

Extract key features from each potential phishing URL. Some fo these features include - URL Length, Number of '.' characters, Number of '/' characters, Number of Numerical Values
"""



"""### KNN"""

import pandas as pd
from matplotlib import pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.metrics import classification_report

from google.colab import drive
drive.mount('/content/drive')
file_path = '/content/drive/My Drive/AI_Learning_Track/new_phishing_data.csv'
df = pd.read_csv(file_path)

y = df['Label']
X = df[['update_age(days)','expiry_age(months)','create_age(months)']]
random_seed = 42

kNN_X_train, kNN_X_test, kNN_y_train, kNN_y_test = train_test_split(X, y, test_size=0.1, random_state=random_seed)

kNN = KNeighborsClassifier()
kNN.fit(kNN_X_train, kNN_y_train)

kNN_y_pred = kNN.predict(kNN_X_test)

ConfusionMatrixDisplay.from_predictions(kNN_y_test, kNN_y_pred)
plt.title("KNN Classifier")
plt.show()

print(f'{classification_report(kNN_y_test, kNN_y_pred)}')

# import pandas as pd
from sklearn import svm

# from google.colab import drive
# drive.mount('/content/drive')
# file_path = '/content/drive/My Drive/AI_Learning_Track/Phishing_Mitre_Dataset_Summer_of_AI.csv'
# df = pd.read_csv(file_path)

y = df['Label']
X = df[['update_age(days)','expiry_age(months)','create_age(months)']]

svm_X_train, svm_X_test, svm_y_train, svm_y_test = train_test_split(X, y, test_size=0.1, random_state=random_seed)

SVM = svm.SVC()
SVM.fit(svm_X_train, svm_y_train)

svm_y_pred = SVM.predict(svm_X_test)

ConfusionMatrixDisplay.from_predictions(svm_y_test, svm_y_pred)
plt.title("Support Vector Machine Classifier")
plt.show()

print(f'{classification_report(svm_y_test, svm_y_pred)}')